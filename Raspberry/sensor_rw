"""
Dominik Fiegl 06.2024
Program to start the gRPC server based on the server.proto file.
The server listens on port 50051 for incoming requests.
Is meant to be implemented to the main file of the SGAS project:
logging.basicConfig()
server = serve()
threading.Thread(target=server.wait_for_termination).start()
"""
from concurrent import futures
import grpc
import logging
from gRPC import server_pb2_grpc
from gRPC import server_pb2
import threading

class sgas_serviceServicer(server_pb2_grpc.sgas_serviceServicer):
    def new_sensor_request(self, request, context):
        _name = request.name
        _type = request.type
        _pin = request.pin
        _addr = request.addr
        GPIOsensor(_name, _pin, _type, _addr)
        return server_pb2.done_message()

    def delete_sensor_request(self, request, context):
        _sensorId = request.sensorId
        #call function to delete sensor
        return server_pb2.done_message()

def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=1))
    server_pb2_grpc.add_sgas_serviceServicer_to_server(sgas_serviceServicer(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    return server
"""
#only runs if it is the main file (not imported) -> testing purposes
if __name__ == "__main__":
    import time
    logging.basicConfig()
    server = serve()
    print("Server started")
    print("Server listening on port 50051")
    threading.Thread(target=server.wait_for_termination).start()
    print("Continuing with the rest of the Python file...")
    while True:
        time.sleep(1)
        print("Server still running...")
        pass
"""
logging.basicConfig()
server = serve()
threading.Thread(target=server.wait_for_termination).start()




"""

NICO + Dominik 06.2024 

"""


from Raspberry import database_orm as db
import peewee as pw
import datetime
import time

#GPIO setup
import RPi.GPIO as GPIO

sensorList = []
class GPIOsensor():
    def __init__(self, name, pin, type='GPIO', addr=''):
        self.name = name
        self.pin = pin
        self.type = type
        self.addr = addr

        #append the sensor to the list of sensors (adds instance)
        sensorList.append(self)
        #save the sensor to the database
        temp = db.Sensor(name=self.name, type='GPIO', pin=self.pin)
        temp.save()
        self.sensorId = temp.sensorId

        #specific setup
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.pin, GPIO.IN)
    
    def getinf(self):
        return (self.sensorId, GPIO.input(self.pin), datetime.datetime.now()) 

def update_sensors_to_db():
    for item in sensorList:
        #create a row in the sensorValue table and saves it
        info = item.getinf()
        dbwrite = db.sensorValue(sensorId=info[0], value=info[1], time_stamp=info[2])
        dbwrite.save()

try:
    # Connect to the database
    db.database.connect()
    # Retrieve the sensor values from the database
    initialSensors = db.sensor.select().order_by(db.sensor.id)
    # Close the database connection
    for sensor in initialSensors:
        # Create a new sensor object
        GPIOsensor(sensor.name, sensor.pin)
        # Add the sensor object to the list of sensors

    while(True):
        update_sensors_to_db()
        time.sleep(100)

except(KeyboardInterrupt):
    print("Interrupted by user. Shutting down...")
    GPIO.cleanup()
    db.close()